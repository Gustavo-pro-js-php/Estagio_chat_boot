const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const puppeteer = require('puppeteer');
const fs = require('fs'); // Para manipular arquivos

// Mapeamento de chat IDs para o estado da conversa
const userStates = {};
// Mapeamento de chat IDs para a INST√ÇNCIA DA P√ÅGINA do Puppeteer
const userPages = {};

class WhatsAppClient {
  constructor() {
    this.client = new Client({ authStrategy: new LocalAuth() });
    this.registerEvents();
  }

  registerEvents() {
    this.client.on('qr', (qr) => {
      qrcode.generate(qr, { small: true });
      console.log('Escaneie o QR code com o WhatsApp!');
    });

    this.client.on('ready', () => {
      console.log('ü§ñ Bot est√° pronto!');
    });
  }

  onMessage(handler) {
    this.client.on('message', handler);
  }

  sendMessage(to, message) {
    return this.client.sendMessage(to, message);
  }

  initialize() {
    this.client.initialize();
  }
}

/**
 * Fun√ß√£o para preencher o formul√°rio de Im√≥vel (IPTU)
 * @param {string} codigoCadastro O c√≥digo de cadastro do im√≥vel.
 * @returns {Promise<puppeteer.Page>} Retorna a inst√¢ncia da p√°gina ap√≥s o login.
 */
async function preencherImovel(codigoCadastro) {
  const browser = await puppeteer.launch({ headless: false }); // Abrir navegador vis√≠vel para debug
  const page = await browser.newPage();

  await page.goto('http://nfse.corumba.ms.gov.br:8080/servicosweb/home.jsf');

  const iptuButtonSelector = '#formHome\\:j_idt1062\\:0\\:j_idt1064';
  await page.waitForSelector(iptuButtonSelector);
  await page.click(iptuButtonSelector);
  console.log('Clicou no bot√£o IPTU (IMOBILI√ÅRIO).');

  const modalImovelSelector = '#compInformarImovel\\:j_idt80';
  await page.waitForSelector(modalImovelSelector, { visible: true });
  console.log('Modal "Informe os dados do im√≥vel" apareceu.');

  const inputImovelSelector = '#compInformarImovel\\:formNumero\\:itIdentText';
  await page.waitForSelector(inputImovelSelector, { visible: true });
  console.log('Campo de C√≥digo de Cadastro vis√≠vel.');

  await page.type(inputImovelSelector, codigoCadastro);
  console.log(`Preencheu o campo com: ${codigoCadastro}`);

  const okButtonImovelSelector = '#compInformarImovel\\:formNumero\\:btnValidar';
  await page.waitForSelector(okButtonImovelSelector, { visible: true });
  await page.click(okButtonImovelSelector);
  console.log('Clicou no bot√£o OK do modal de Im√≥vel.');

  await page.waitForNavigation({ waitUntil: 'networkidle0' });
  console.log('Navega√ß√£o ap√≥s login de IPTU conclu√≠da.');

  return page; // Retorna a p√°gina para intera√ß√µes futuras
}

/**
 * Fun√ß√£o para preencher o formul√°rio de Contribuinte (CPF)
 * @param {string} cpf O n√∫mero do CPF.
 * @returns {Promise<puppeteer.Page>} Retorna a inst√¢ncia da p√°gina ap√≥s o login.
 */
async function preencherContribuinte(cpf) {
  const browser = await puppeteer.launch({ headless: false }); // Abrir navegador vis√≠vel para debug
  const page = await browser.newPage();

  await page.goto('http://nfse.corumba.ms.gov.br:8080/servicosweb/home.jsf');

  const contribuinteButtonSelector = '#formHome\\:j_idt1062\\:3\\:j_idt1064';
  await page.waitForSelector(contribuinteButtonSelector);
  await page.click(contribuinteButtonSelector);
  console.log('Clicou no bot√£o Contribuinte\\TRS.');

  const formContribuinteSelector = '#compInformarContribuinte\\:formNumero';
  await page.waitForSelector(formContribuinteSelector, { visible: true });
  console.log('Formul√°rio de Contribuinte apareceu (dentro do modal).');

  const radioPessoaFisicaSelector = '#compInformarContribuinte\\:formNumero\\:radioCadastroTipoPessoa\\:0';
  const isChecked = await page.$eval(radioPessoaFisicaSelector, el => el.checked);
  if (!isChecked) {
      await page.click(radioPessoaFisicaSelector);
      console.log('Clicou no r√°dio button "Pessoa F√≠sica".');
      await page.waitForTimeout(500); // Pequeno atraso
  } else {
      console.log('R√°dio button "Pessoa F√≠sica" j√° selecionado.');
  }

  const inputContribuinteSelector = '#compInformarContribuinte\\:formNumero\\:itIdent';
  await page.waitForSelector(inputContribuinteSelector, { visible: true });
  console.log('Campo de CPF/CNPJ vis√≠vel.');

  await page.type(inputContribuinteSelector, cpf);
  console.log(`Preencheu o campo com: ${cpf}`);

  const okButtonContribuinteSelector = '#compInformarContribuinte\\:formNumero\\:btnValidar';
  await page.waitForSelector(okButtonContribuinteSelector, { visible: true });
  await page.click(okButtonContribuinteSelector);
  console.log('Clicou no bot√£o OK do modal de Contribuinte.');

  await page.waitForNavigation({ waitUntil: 'networkidle0' });
  console.log('Navega√ß√£o ap√≥s login de Contribuinte conclu√≠da.');

  return page; // Retorna a p√°gina para intera√ß√µes futuras
}

/**
 * Fun√ß√£o para interagir com as op√ß√µes p√≥s-login de contribuinte
 * @param {string} option A op√ß√£o escolhida pelo usu√°rio (1 ou 2).
 * @param {puppeteer.Page} page A inst√¢ncia da p√°gina do Puppeteer.
 * @param {string} chatId O ID do chat para enviar o PDF.
 */
async function lidarOpcoesContribuinte(option, page, chatId) {
    let messageToUser = '';
    try {
        if (option === '1') {
            const debitosAbertoSelector = '#formContribuinte\\:repeat\\:0\\:clLinkImobiliario';
            await page.waitForSelector(debitosAbertoSelector, { visible: true });
            await page.click(debitosAbertoSelector);
            console.log('Clicou em "D√âBITOS EM ABERTO".');
            messageToUser = 'Clicou em "D√âBITOS EM ABERTO". Agora voc√™ pode interagir com essa tela no navegador.';
            await page.waitForNavigation({ waitUntil: 'networkidle0' });
            console.log('Navega√ß√£o para D√©bitos em Aberto conclu√≠da.');
        } else if (option === '2') {
            const certidaoNegativaSelector = '#formContribuinte\\:repeat\\:1\\:clLinkImobiliario';
            await page.waitForSelector(certidaoNegativaSelector, { visible: true });
            await page.click(certidaoNegativaSelector);
            console.log('Clicou em "CERTID√ÉO NEGATIVA DE D√âBITOS".');

            // Aguardar a navega√ß√£o para a p√°gina de certid√£o (se houver)
            await page.waitForNavigation({ waitUntil: 'networkidle0' });
            console.log('Navega√ß√£o para tela de Certid√£o Negativa de D√©bitos conclu√≠da.');

            // NOVO: Processo para imprimir e enviar o PDF
            const imprimirCertidaoButtonSelector = '#formCertidaoNegativaDebitos\\:tabView\\:j_idt396\\:j_idt443';
            await page.waitForSelector(imprimirCertidaoButtonSelector, { visible: true });
            console.log('Bot√£o "Imprimir Certid√£o" vis√≠vel.');

            // Clicar no bot√£o que abre o PDF em uma nova aba
            // Puppeteer precisa de uma forma de esperar pela nova aba
            const [pdfPage] = await Promise.all([
                new Promise(resolve => page.browser().once('targetcreated', target => resolve(target.page()))),
                page.click(imprimirCertidaoButtonSelector)
            ]);

            // Se o PDF for carregado diretamente na nova aba (target type 'page' ou 'other')
            if (pdfPage) {
                console.log('Nova aba para o PDF detectada.');
                await pdfPage.waitForNavigation({ waitUntil: 'networkidle0' }); // Espera o conte√∫do da nova aba carregar
                console.log('Conte√∫do da nova aba carregado.');

                // Salvar o PDF
                const pdfPath = `./certidao_${Date.now()}.pdf`;
                await pdfPage.pdf({ path: pdfPath, format: 'A4' });
                console.log(`PDF salvo em: ${pdfPath}`);

                // Fechar a aba do PDF
                await pdfPage.close();
                console.log('Aba do PDF fechada.');

                // Enviar o PDF pelo WhatsApp
                try {
                    const media = MessageMedia.fromFilePath(pdfPath);
                    await bot.client.sendMessage(chatId, media, { caption: 'Sua certid√£o negativa de d√©bitos.' });
                    messageToUser = '‚úÖ Sua certid√£o negativa de d√©bitos foi enviada para voc√™!';
                } catch (sendError) {
                    console.error('Erro ao enviar o PDF pelo WhatsApp:', sendError);
                    messageToUser = '‚ùå Ocorreu um erro ao enviar a certid√£o pelo WhatsApp.';
                } finally {
                    fs.unlinkSync(pdfPath); // Deleta o arquivo PDF localmente ap√≥s o envio
                    console.log('Arquivo PDF local deletado.');
                }
            } else {
                messageToUser = '‚ùå N√£o foi poss√≠vel gerar ou encontrar a certid√£o PDF.';
                console.error('N√£o foi poss√≠vel obter a inst√¢ncia da nova p√°gina do PDF.');
            }

        } else {
            messageToUser = 'Op√ß√£o inv√°lida. Por favor, digite "1" para "D√©bitos em Aberto" ou "2" para "Certid√£o Negativa de D√©bitos".';
        }
    } catch (error) {
        console.error('Erro ao lidar com as op√ß√µes de contribuinte:', error);
        messageToUser = '‚ùå Ocorreu um erro ao tentar acessar a op√ß√£o. Por favor, tente novamente.';
    }
    return messageToUser;
}

const bot = new WhatsAppClient();

bot.onMessage(async message => {
  const chatId = message.from;
  const text = message.body.trim().toLowerCase();

  // Importar MessageMedia apenas quando necess√°rio para evitar ReferenceError se n√£o for usado
  // ou importar no topo se for usado sempre. Para este caso, melhor no topo.
  const { MessageMedia } = require('whatsapp-web.js');

  // Se o usu√°rio n√£o est√° em um estado de conversa, perguntar a op√ß√£o
  if (!userStates[chatId]) {
    await bot.sendMessage(chatId,
      'Ol√°! Por qual tipo de dado voc√™ gostaria de acessar?\n' +
      '1. C√≥digo de Cadastro (IPTU)\n' +
      '2. CPF (Contribuinte)'
    );
    userStates[chatId] = 'awaiting_option';
    return;
  }

  // Se o usu√°rio est√° esperando a op√ß√£o de login (IPTU ou CPF)
  if (userStates[chatId] === 'awaiting_option') {
    if (text === '1' || text.includes('iptu') || text.includes('cadastro')) {
      await bot.sendMessage(chatId, 'Certo! Por favor, informe o C√≥digo de Cadastro do im√≥vel.');
      userStates[chatId] = 'awaiting_iptu_code';
    } else if (text === '2' || text.includes('cpf') || text.includes('contribuinte')) {
      await bot.sendMessage(chatId, 'Ok! Por favor, informe o n√∫mero do seu CPF (somente n√∫meros).');
      userStates[chatId] = 'awaiting_cpf';
    } else {
      await bot.sendMessage(chatId, 'Op√ß√£o inv√°lida. Por favor, digite "1" para C√≥digo de Cadastro ou "2" para CPF.');
    }
    return;
  }

  // Se o usu√°rio est√° esperando o c√≥digo de cadastro
  if (userStates[chatId] === 'awaiting_iptu_code') {
    const codigoCadastro = message.body.trim();
    await bot.sendMessage(chatId, `Recebi o c√≥digo: ${codigoCadastro}. Tentando preencher o site para IPTU...`);
    try {
      const page = await preencherImovel(codigoCadastro);
      userPages[chatId] = page;
      userStates[chatId] = 'logged_in_iptu';
      await bot.sendMessage(chatId, '‚úÖ C√≥digo de cadastro preenchido no site com sucesso para IPTU! Voc√™ est√° logado no ambiente de IPTU.');
    } catch (error) {
      console.error('Erro ao preencher o site (IPTU):', error);
      await bot.sendMessage(chatId, '‚ùå Erro ao preencher o c√≥digo de cadastro no site para IPTU. Por favor, verifique o console do servidor para mais detalhes.');
      delete userStates[chatId];
      if (userPages[chatId]) {
          await userPages[chatId].browser().close();
          delete userPages[chatId];
      }
    }
    return;
  }

  // Se o usu√°rio est√° esperando o CPF
  if (userStates[chatId] === 'awaiting_cpf') {
    const cpf = message.body.trim();
    if (!/^\d{11}$/.test(cpf)) {
      await bot.sendMessage(chatId, 'CPF inv√°lido. Por favor, digite apenas os 11 n√∫meros do CPF.');
      return;
    }
    await bot.sendMessage(chatId, `Recebi o CPF: ${cpf}. Tentando preencher o site para Contribuinte...`);
    try {
      const page = await preencherContribuinte(cpf);
      userPages[chatId] = page;
      userStates[chatId] = 'awaiting_contribuinte_option';
      await bot.sendMessage(chatId,
        '‚úÖ CPF preenchido no site com sucesso para Contribuinte! Por favor, escolha uma op√ß√£o:\n' +
        '1. D√©bitos em Aberto\n' +
        '2. Certid√£o Negativa de D√©bitos'
      );
    } catch (error) {
      console.error('Erro ao preencher o site (CPF):', error);
      await bot.sendMessage(chatId, '‚ùå Erro ao preencher o CPF no site para Contribuinte. Por favor, verifique o console do servidor para mais detalhes.');
      delete userStates[chatId];
      if (userPages[chatId]) {
          await userPages[chatId].browser().close();
          delete userPages[chatId];
      }
    }
    return;
  }

  // Se o usu√°rio est√° na tela de op√ß√µes do contribuinte
  if (userStates[chatId] === 'awaiting_contribuinte_option') {
    const option = text;
    if (userPages[chatId]) {
        const page = userPages[chatId];
        const responseMessage = await lidarOpcoesContribuinte(option, page, chatId); // Passa chatId para lidarOpcoesContribuinte
        await bot.sendMessage(chatId, responseMessage);

        // Se a op√ß√£o 2 foi escolhida e o PDF foi enviado, voc√™ pode decidir fechar o navegador aqui
        // ou deixar aberto para outras intera√ß√µes. Para o fluxo de "enviar PDF e terminar", fechar √© l√≥gico.
        if (option === '2') {
             if (userPages[chatId]) { // Garante que a p√°gina ainda existe antes de tentar fechar
                await userPages[chatId].browser().close();
                delete userPages[chatId];
            }
            delete userStates[chatId];
        } else {
             // Se n√£o for a op√ß√£o 2, o navegador permanece aberto e o estado √© resetado
             delete userStates[chatId];
             // Poder√≠amos adicionar uma op√ß√£o para o usu√°rio digitar "sair" para fechar o navegador
             // e limpar a sess√£o.
        }

    } else {
        await bot.sendMessage(chatId, '‚ùå Parece que a sess√£o do navegador foi perdida. Por favor, comece novamente.');
        delete userStates[chatId];
    }
    return;
  }

  // Em caso de mensagens inesperadas em outros estados
  if (userStates[chatId]) {
      await bot.sendMessage(chatId, 'N√£o entendi. Por favor, siga as instru√ß√µes ou digite "reset" para recome√ßar.');
      if (text === 'reset') {
          delete userStates[chatId];
          if (userPages[chatId]) {
              await userPages[chatId].browser().close();
              delete userPages[chatId];
          }
          await bot.sendMessage(chatId, 'Sess√£o resetada. Por favor, comece novamente.');
      }
  } else {
      await bot.sendMessage(chatId, 'Bem-vindo! Digite qualquer coisa para come√ßar e escolher uma op√ß√£o de login.');
  }
});

bot.initialize();